generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  passwordHash String
  isActive     Boolean       @default(true)
  roleId       Int?
  role         Role?         @relation(fields: [roleId], references: [id])
  profile      UserProfile?
  sessions     UserSession[]
  tickets      Ticket[]
  responses    TicketResponse[] @relation("UserResponses")
  bulkUploads  BulkPassportUpload[]
  passports    Passport[]
  payments     Payment[]
  voucherBatches VoucherBatch[]
  vouchers     Voucher[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserProfile {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  phone     String?
  address   String?
  bio       String?
  user      User   @relation(fields: [userId], references: [id])
}

model UserSession {
  id         Int      @id @default(autoincrement())
  userId     Int
  loginTime  DateTime @default(now())
  logoutTime DateTime?
  ipAddress  String?
  userAgent  String?
  user       User     @relation(fields: [userId], references: [id])
}

model BulkPassportUpload {
  id             Int        @id @default(autoincrement())
  originalName   String
  totalRows      Int
  processedRows  Int        @default(0)
  totalAmount    Decimal    @default(0)
  validFrom      DateTime?
  validUntil     DateTime?
  createdById    Int?
  createdBy      User?      @relation(fields: [createdById], references: [id])
  passports      Passport[]
  vouchers       Voucher[]
}

model Passport {
  id                Int       @id @default(autoincrement())
  type              String?
  code              String?
  nationality       String?
  passportNo        String?
  surname           String?
  givenName         String?
  dob               DateTime?
  sex               String?
  placeOfBirth      String?
  placeOfIssue      String?
  dateOfIssue       DateTime?
  dateOfExpiry      DateTime?
  fatherName        String?
  motherName        String?
  spouseName        String?
  oldPassportDetails String?
  fileNumber        String?
  address           String?
  photoPath         String?
  signaturePath     String?
  createdById       Int?
  createdBy         User?     @relation(fields: [createdById], references: [id])
  bulkUploadId      Int?
  bulkUpload        BulkPassportUpload? @relation(fields: [bulkUploadId], references: [id])
  payments          Payment[]
  vouchers          Voucher[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Payment {
  id                  Int       @id @default(autoincrement())
  code                String    @unique
  totalVouchers       Int
  voucherValue        Decimal
  totalAmount         Decimal
  discount            Decimal   @default(0)
  amountAfterDiscount Decimal
  collectedAmount     Decimal
  returnedAmount      Decimal   @default(0)
  paymentMode         PaymentMode
  cardNumber          String?
  cardHolder          String?
  cvv                 String?
  expiryDate          String?
  validFrom           DateTime
  validUntil          DateTime
  shareWithEmail      String?
  shareWithNumber     String?
  usedAt              DateTime?
  passportId          Int
  passport            Passport  @relation(fields: [passportId], references: [id])
  createdById         Int?
  createdBy           User?     @relation(fields: [createdById], references: [id])
  vouchers            Voucher[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([code])
  @@index([createdAt])
  @@index([paymentMode])
  @@map("payments")
}

enum PaymentMode {
  cash
  card
}

model VoucherBatch {
  id                  Int       @id @default(autoincrement())
  createdById         Int?
  createdBy           User?     @relation(fields: [createdById], references: [id])
  totalVouchers       Int
  voucherValue        Decimal
  totalAmount         Decimal
  discount            Decimal   @default(0)
  amountAfterDiscount Decimal
  collectedAmount     Decimal
  returnedAmount      Decimal   @default(0)
  paymentMode         PaymentMode
  cardNumber          String?
  cardHolder          String?
  cvv                 String?
  expiryDate          String?
  validFrom           DateTime
  validUntil          DateTime
  shareWithEmail      String?
  shareWithNumber     String?
  purchaseOrderReference String?
  vouchers            Voucher[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Voucher {
  id           Int       @id @default(autoincrement())
  voucherBatchId Int?
  voucherBatch  VoucherBatch? @relation(fields: [voucherBatchId], references: [id])
  code         String    @unique
  validFrom    DateTime
  validUntil   DateTime
  usedAt       DateTime?
  passportId   Int?
  passport     Passport? @relation(fields: [passportId], references: [id])
  paymentId    Int?
  payment      Payment?  @relation(fields: [paymentId], references: [id])
  bulkUploadId Int?
  bulkUpload   BulkPassportUpload? @relation(fields: [bulkUploadId], references: [id])
  value        Decimal?  @default(0)
  createdById  Int?
  createdBy    User?     @relation(fields: [createdById], references: [id])
  status       String?   @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([code])
  @@index([validFrom, validUntil])
  @@index([usedAt])
  @@index([status])
  @@map("vouchers")
}

model Quotation {
  id          Int       @id @default(autoincrement())
  subject     String
  description String?
  amount      Decimal   @db.Decimal(10, 2)
  status      String    @default("pending")
  invoice     Invoice?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id          Int       @id @default(autoincrement())
  quotationId Int       @unique
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  amount      Decimal   @db.Decimal(10, 2)
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticket {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  subject   String
  category  String
  priority  TicketPriority @default(Low)
  status    TicketStatus   @default(Open)
  description String?
  attachment  String?
  responses TicketResponse[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketResponse {
  id          Int      @id @default(autoincrement())
  ticketId    Int
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  responderId Int
  responder   User     @relation("UserResponses", fields: [responderId], references: [id])
  message     String
  attachment  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TicketPriority {
  Low
  Medium
  High
  Urgent
}

enum TicketStatus {
  Open
  InProgress
  Resolved
  Closed
}

